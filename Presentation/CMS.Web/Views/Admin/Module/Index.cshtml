@using CMS.Web.FrameWork.Helpers
@model CMS.Web.Admin.Models.ModuleModel
@{
	ViewBag.Title = "Modules";
	Layout = "~/Views/Admin/Shared/_AdminLayout.cshtml";
}
<div id="PageContent">
	<div class="page-header">
		<div class="pull-left">
			<h1>
				Modules</h1>
		</div>
		<div class="pull-right tool-bar">
			@Html.Button("New", new Dictionary<string, object>() {
																{ "id", "new" },
																{ "class", "btn btn-primary" } 
														})
			@Html.Button("Delete", new Dictionary<string, object>() {
																{ "id", "delete" },
																{ "class", "btn btn-danger" } 
														})
		</div>
		<div class="clearfix">
			&nbsp;</div>
	</div>
	<div class="grid-box">
		<table class="table table-bordered span12" id="modulelist">
			<thead>
				<tr>
					<th class="span1" style="text-align: center">
						@Html.CheckBox("selectall", false)
					</th>
					<th class="span3" sortname="ModuleName">
						Module Name
					</th>
					<th class="span1" sortname="ModuleTypeName">
						Type
					</th>
					<th class="span2" sortname="PositionName">
						Position
					</th>
					<th class="span1" sortname="SortOrder">
						Order
					</th>
					<th class="span2" sortname="AccessLevelName">
						Access Level
					</th>
					<th class="span1" sortname="IsPublish">
						Publish
					</th>
					<th class="span1">
					</th>
				</tr>
			</thead>
		</table>
	</div>
</div>
<div id="EditModule" class="hide">
	<div class="bootdialog-body">
	</div>
	<div class="row footer">
		<div class="pull-right">
			@Html.Button("Close", new Dictionary<string, object>() {
																{ "id", "close" },
																{ "class", "btn input-small" } ,
                                                                { "dialog-close", "true" }
														})
			@Html.Button("Save", new Dictionary<string, object>() {
																{ "id", "save" },
																{ "class", "btn btn-primary input-small" },
																{ "data-loading-text", "Saving" },
														})
		</div>
	</div>
</div>
@section script{
	@using (Html.jQueryTemplateScript("edittemplate")) {
	 using (Html.Form(new { @id = "frmEditModule", @class = "form-horizontal", @onsubmit = "return false" })) {
		@Html.Hidden("SortOrder", "${SortOrder}")
		@Html.Hidden("ModuleID", "${ModuleID}")
		<div class="page-header edit">
			<h3>
				{{if ModuleID>0}}Edit Module{{else}}Create Module{{/if}}</h3>
		</div>
		<div class="row">
			<div class="span6">
				<div class="control-group">
					<label for="ModuleName" class="control-label">
						Name</label>
					<div class="controls">
						@Html.TextBox("ModuleName", "${ModuleName}", new { @class = "input-xlarge" })
					</div>
				</div>
				<div class="control-group">
					<label for="PositionName" class="control-label">
						Module Type</label>
					<div class="controls">
						@{
		 List<SelectListItem> moduleTypes = (from moduleType in Model.ModuleTypes
											 select new SelectListItem {
												 Text = moduleType.ModuleTypeName,
												 Value = moduleType.ModuleTypeID.ToString()
											 }).ToList();
		 moduleTypes.Insert(0, new SelectListItem { Text = "", Value = "" });
						}
						@Html.DropDownList("ModuleTypeID", moduleTypes, new Dictionary<string, object>() { { "allow_single_deselect", "true" }, { "data-placeholder", "Choose a module type" }, { "val", "${ModuleTypeID}" }, { "class", "input-large" } })
					</div>
				</div>
				<div class="control-group">
					<label for="PositionName" class="control-label">
						Position</label>
					<div class="controls">
						@{
		 List<SelectListItem> positions = (from position in Model.Positions
										   select new SelectListItem {
											   Text = position.PositionName,
											   Value = position.PositionID.ToString()
										   }).ToList();
		 positions.Insert(0, new SelectListItem { Text = "", Value = "" });

						}
						@Html.DropDownList("PositionID", positions, new Dictionary<string, object>() { { "allow_single_deselect", "true" }, { "data-placeholder", "Choose a position" }, { "val", "${PositionID}" }, { "class", "input-large" } })
					</div>
				</div>
				<div class="control-group">
					<label for="multiSelect" class="control-label">
						Access</label>
					<div class="controls">
						@{
		 List<SelectListItem> accessLevels = (from access in Model.AccessLevels
											  select new SelectListItem {
												  Text = access.AccessLevelName,
												  Value = access.AccessLevelID.ToString()
											  }).ToList();
						}
						@Html.DropDownList("AccessLevelID", accessLevels, new Dictionary<string, object>() { { "allow_single_deselect", "true" }, { "data-placeholder", "Choose a access level" }, { "val", "${AccessLevelID}" }, { "class", "input-large" } })
					</div>
				</div>
				<div id="selectRoles" class="control-group {{if AccessLevelID == 1}}hide{{/if}}">
					<label for="PositionName" class="control-label">
						Roles</label>
					<div class="controls">
						@{
		 List<SelectListItem> roles = (from role in Model.Roles
									   select new SelectListItem {
										   Text = role.RoleName,
										   Value = role.RoleID.ToString()
									   }).ToList();
						}
						@Html.DropDownList("RolesIDs", roles, new Dictionary<string, object>() { { "allow_single_deselect", "true" }, { "data-placeholder", "Choose a roles..." }, { "val", "{{each(i,roleID) ModulesInRoles}}${roleID},{{/each}}" }, { "multiple", "multiple" }, { "class", "input-large" } })
					</div>
				</div>
				<div class="control-group">
					<label for="IsPublish" class="control-label">
						Publish Up</label>
					<div class="controls">
						@Html.TextBox("PublishUp", "${PublishUpFormat}", new Dictionary<string, object>() { { "class", "input-small" }, { "date-picker", "true" } })
					</div>
				</div>
				<div class="control-group">
					<label for="IsPublish" class="control-label">
						Publish Down</label>
					<div class="controls">
						@Html.TextBox("PublishDown", "${PublishDownFormat}", new Dictionary<string, object>() { { "class", "input-small" }, { "date-picker", "true" } })
					</div>
				</div>
				<div class="control-group">
					<label for="IsPublish" class="control-label">
						Publish</label>
					<div class="controls">
						@Html.CheckBox("IsPublish", false, new { @class = "fancy-chk", @val = "${IsPublish}" })
					</div>
				</div>
			</div>
			<div class="span6" id="parameters">
			</div>
		</div>
	 }
 }
	@using (Html.jQueryTemplateScript("gridtemplate")) {
		<text>{{each(i,row) rows}}</text>
		<tr>
			<td class="span1" style="text-align: center">
				@Html.CheckBox("ModuleID", false, new { @value = "${row.ModuleID}" })
			</td>
			<td class="span3">
				@Html.Anchor("${ModuleName}", new { @rel = "tooltip", @title = "Edit", @style = "cursor:pointer" })
			</td>
			<td class="span1">
				${ModuleTypeName}
			</td>
			<td class="span2">
				${PositionName}
			</td>
			<td class="span1">
				${SortOrder}
			</td>
			<td class="span2">
				${AccessLevelName}
			</td>
			<td class="span1">
				${IsPublish}
			</td>
			<td class="span1">
				@Html.Anchor("<i class='icon-edit'>&nbsp;</i>", new { @rel = "tooltip", @title = "Edit", @style = "cursor:pointer" })
			</td>
		</tr>
		<text>{{/each}}</text>
 }
	@using (Html.jQueryTemplateScript("errortemplate")) {
		<div class='alert alert-error'>
			<a data-dismiss="alert" class="close">&times</a>
			<text>{{each(i,err) Errors}}</text>
			${err.ErrorMessage}<br />
			<text>{{/each}}</text>
		</div>
 }
	
	@{Html.RenderPartial("_ParameterTemplate");}
	@{Html.RenderPartial("_FileManagerTemplate");}
	<script src="@Url.Content("~/Assets/js/module.js")" type="text/javascript"></script>
	<script src="@Url.Content("~/Assets/js/module-extend.js")" type="text/javascript"></script>
}
